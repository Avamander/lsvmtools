#!/bin/bash

run_agent()
{
    ../build/bin/lsvmtool-password-agent tmp/bootkey tmp/rootkey
}

ask_boot()
{
    systemd-ask-password --no-tty "Please give password for /boot:"
}

ask_root()
{
    systemd-ask-password --no-tty "Please give password for luks-123:"
}

setup()
{
    rm -rf tmp
    mkdir -p tmp
    echo -n "BOOTKEY" > tmp/bootkey
    echo -n "ROOTKEY" > tmp/rootkey
}

reset_test()
{
    rm -f KEY0
    rm -f KEY1
    rm -f KEY2
}

# Test cases on order of what program gets called.
# r = root ask (waits until it finds the key and then decrypts root)
# a = agent (password agent)
# b = boot ask (unseals the keys and then decrypts boot)

setup

make debug-no-cap TIMEOUT=3000

first=(run_agent run_agent ask_boot ask_boot ask_root ask_root)
second=(ask_boot ask_root run_agent ask_root run_agent ask_boot)
third=(ask_root ask_boot ask_root run_agent ask_boot run_agent)

invalid=0
for i in "${!first[@]}"; do
    reset_test
    
    cmd1="${first[$i]}"
    cmd2="${second[$i]}"
    cmd3="${third[$i]}"
    printf "Starting test $i: $cmd1 $cmd2 $cmd3\n"

    $cmd1 > KEY0 &
    $cmd2 > KEY1 &
    $cmd3 > KEY2

    cmds=("$cmd1" "$cmd2" "$cmd3")

    # Wait for requests to finish
    sleep 5

    for j in "${!cmds[@]}"; do
        chk_cmd="${cmds[$j]}"
        key=$(<"KEY$j")

        if [[ "$chk_cmd" == "ask_boot" && "$key" != "BOOTKEY" ]]; then
            printf "    ERROR: wrong bootkey $cmd1 $cmd2 $cmd3\n"
            invalid=1
        fi
        if [[ "$chk_cmd" == "ask_root" && "$key" != "ROOTKEY" ]];  then
            printf "    ERROR: wrong rootkey $cmd1 $cmd2 $cmd3\n"
            invalid=1
        fi
    done
done
echo "All tests complete!"
exit $invalid
